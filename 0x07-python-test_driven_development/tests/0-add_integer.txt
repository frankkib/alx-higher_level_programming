"""add_integer_module"""
Using ``add_integer``
-------------------

Importing the module
	>>> add_integer = __import__('0-add_integer').add_integer

Checking for docstring function:
	>>> j = __import__("0-add_integer").0-add_integer.__doc__
	>>> len(j) > 1
	True
Checking for docstring module:
	>>> k = __import__("0-add_integer").0-add_integer.__doc__
	>>> len(k) > 1
	True
Checking for normal addition:
	>>> add_integer(1, 2)
	3
Checking for negative and positive:
	add_integer(-1, 2)
	1
checking for positive negative:
	add_integer(1, -2)
	-1
Checking for float values:
	add_integer(1.2, 2.1)
	3
Checking with int and float:
	add_integer(1, 2.1)
	3
checking with float and int:
	add_integer(1.2, 2)
	3
Checking for passed NaN:
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

Checking for passed inf:
	 >>> add_integer(1, float('inf'))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity to integer
hecking super long int:
	 >>> add_integer(999999999999999999999999999999, 1)
	 1000000000000000000000000000000

Checking non-number with number:
	 >>> add_integer([1], 2)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Checking number with non-number:
	 >>> add_integer(3, "2")
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

Checking non-number with non-number:
	 >>> add_integer((2,), {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

